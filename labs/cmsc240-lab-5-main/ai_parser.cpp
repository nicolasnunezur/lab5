#include "ai_utils.h"
#include <map>
#include <set>

int main(int argc, char* argv[]) {

    if (argc < 2) {
        cerr << "Usage: " << argv[0] << " <GAME>" << endl;
        return 1;
    }

    // READ IN THE LOG FILE GENERATED BY solution_generator.py
    vector<gameIO> game_data;

    ifstream infile("AI-" + string(argv[1]) + ".log");
    if (infile) {
        game_data = parseGameIO(infile);
        infile.close();
    }

    // show how many commands and outputs were generated before the [YOU WIN!] state
    cout << " === TOTAL CHUNKS: " << game_data.size() << " ===" << endl;

    // Process the parsed game data (FEEL FREE TO REMOVE OR MODIFY THIS)
    for (auto& chunk : game_data) {
        cout << "Input: " << chunk.input << endl;
        cout << "Outputs: " << endl;
        for (string output : chunk.outputs) {
            cout << " - " << output << endl;
        }
    }

    vector<gameState> novel_game_states;
    string WIN_LOCATION = "";               // use this to track if you've found the winning location yet

    // CREATE YOUR COMMAND PRUNING CODE HERE TO REDUCE THE RANDOM SOLUTION //
    vector<string> best_commands = {};
    set<string> inventory;
    string current_location = "beach"; 
    map<string, string> location_items = {
        {"beach", "palm leaf"},
        {"jungle", "wood"},
        {"cave", "rope"},
        {"volcano", "stone"}
    };
    bool usePalm = false;
    bool useWood = false;
    bool useRope = false;
    bool useStone = false;



    for (auto& chunk : game_data) {
        string cmd = chunk.input;

        if (cmd == "[GAME START]") continue;
        if (cmd == "help" || cmd == "show map" || cmd == "show inventory") continue;

        bool invalid = false;
        for (string out : chunk.outputs) {
            if (out.find("[INVALID COMMAND]") != string::npos) {
                invalid = true;
                break;
            }
            if (out.find("[LOCATION: ") != string::npos) {
                size_t start = out.find("[LOCATION: ") + 11;
                size_t end = out.find("]", start);
                current_location = out.substr(start, end - start);
            }
        }

        if (invalid) continue;

        // GET FILTER
        if (cmd.rfind("get ", 0) == 0) {
            string item = cmd.substr(4);
            if (item != location_items[current_location]) continue;
            if (inventory.count(item)) continue;
            inventory.insert(item);
            best_commands.push_back(cmd);
            continue;
        }

        // USE FILTER
        if (cmd.rfind("use ", 0) == 0) {
            string item = cmd.substr(4);

            if (item == "palm leaf" && usePalm) continue;
            if (item == "wood" && useWood) continue;
            if (item == "rope" && useRope) continue;
            if (item == "stone" && useStone) continue;

            if (current_location != "beach") continue;
            if (!inventory.count(item)) continue;

            if (item == "palm leaf") usePalm = true;
            if (item == "wood") useWood = true;
            if (item == "rope") useRope = true;
            if (item == "stone") useStone = true;

            best_commands.push_back(cmd);
            continue;
        }

        // GOTO FILTER
        if (cmd.rfind("goto ", 0) == 0) {
            string location = cmd.substr(5);

            if (location == "cave" && current_location != "jungle") {
                continue;
            }

            if (location == "jungle" && inventory.count("wood")) {
                continue;
            }
            if (location == "beach" && inventory.count("palm leaf")) {
                continue;
            }
            if (location == "cave" && inventory.count("rope")) {
                continue;
            }
            if (location == "volcano" && inventory.count("stone")) {
                continue;
            }

            if (location == current_location) {
                continue; 
            }
            
            best_commands.push_back(cmd);
            continue;
        }


    }

    // show the results of your pruning
    cout << " == REDUCED COMMANDS TO SOLUTION: " << best_commands.size() << " ==" << endl;
    cout << "Command % reduction from " << game_data.size() << " to " << best_commands.size() << " : " 
         << (1.0 - (double)best_commands.size() / game_data.size()) * 100 << "%" << endl;

    // export the best commands
    ofstream outfile(string(argv[1]) + ".solution");
    for (string command : best_commands) {
        outfile << command << endl;
    }
    outfile.close();

    return 0;
}
